diff --git a/node_modules/ipfs-repo/src/index.js b/node_modules/ipfs-repo/src/index.js
index 3f3f54f..27b7904 100644
--- a/node_modules/ipfs-repo/src/index.js
+++ b/node_modules/ipfs-repo/src/index.js
@@ -47,7 +47,7 @@ class Repo {
    * @param {Backends} backends - backends used by this repo
    * @param {Partial<Options>} [options] - Configuration
    */
-  constructor (path, loadCodec, backends, options) {
+  constructor(path, loadCodec, backends, options) {
     if (typeof path !== 'string') {
       throw new Error('missing repo path')
     }
@@ -95,7 +95,7 @@ class Repo {
    * @param {import('./types').Config} config - config to write into `config`.
    * @returns {Promise<void>}
    */
-  async init (config) {
+  async init(config) {
     log('initializing at: %s', this.path)
     await this._openRoot()
     await this.config.replace(buildConfig(config))
@@ -108,7 +108,7 @@ class Repo {
    *
    * @returns {Promise<boolean>}
    */
-  async isInitialized () {
+  async isInitialized() {
     if (!this.closed) {
       // repo is open, must be initialized
       return true
@@ -134,7 +134,7 @@ class Repo {
    *
    * @returns {Promise<void>}
    */
-  async open () {
+  async open() {
     if (!this.closed) {
       throw errCode(new Error('repo is already open'), ERRORS.ERR_REPO_ALREADY_OPEN)
     }
@@ -197,7 +197,7 @@ class Repo {
    *
    * @private
    */
-  async _openRoot () {
+  async _openRoot() {
     try {
       await this.root.open()
     } catch (/** @type {any} */ err) {
@@ -214,7 +214,7 @@ class Repo {
    * @private
    * @returns {Promise<LockCloser>}
    */
-  async _openLock () {
+  async _openLock() {
     const lockfile = await this.options.repoLock.lock(this.path)
 
     if (typeof lockfile.close !== 'function') {
@@ -229,7 +229,8 @@ class Repo {
    *
    * @private
    */
-  _closeLock () {
+  _closeLock() {
+    this.gcLock.disconnect && this.gcLock.disconnect();
     return this._lockfile && this._lockfile.close()
   }
 
@@ -238,7 +239,7 @@ class Repo {
    *
    * @private
    */
-  async _checkInitialized () {
+  async _checkInitialized() {
     log('init check')
     let config
     try {
@@ -269,7 +270,7 @@ class Repo {
    *
    * @returns {Promise<void>}
    */
-  async close () {
+  async close() {
     if (this.closed) {
       throw errCode(new Error('repo is already closed'), ERRORS.ERR_REPO_ALREADY_CLOSED)
     }
@@ -302,7 +303,7 @@ class Repo {
    *
    * @returns {Promise<boolean>}
    */
-  exists () {
+  exists() {
     return this.version.exists()
   }
 
@@ -311,7 +312,7 @@ class Repo {
    *
    * @returns {Promise<Stat>}
    */
-  async stat () {
+  async stat() {
     if (this.datastore && this.keys) {
       const [storageMax, blocks, version, datastore, keys] = await Promise.all([
         this._storageMaxStat(),
@@ -338,7 +339,7 @@ class Repo {
   /**
    * @private
    */
-  async _isAutoMigrationEnabled () {
+  async _isAutoMigrationEnabled() {
     if (this.options.autoMigrate !== undefined) {
       return this.options.autoMigrate
     }
@@ -365,7 +366,7 @@ class Repo {
    * @param {number} toVersion
    * @param {Backends} backends
    */
-  async _migrate (toVersion, backends) {
+  async _migrate(toVersion, backends) {
     const currentRepoVersion = await this.version.get()
 
     if (currentRepoVersion > toVersion) {
@@ -386,7 +387,7 @@ class Repo {
   /**
    * @private
    */
-  async _storageMaxStat () {
+  async _storageMaxStat() {
     try {
       const max = /** @type {number} */(await this.config.get('Datastore.StorageMax'))
       return BigInt(bytes(max))
@@ -398,7 +399,7 @@ class Repo {
   /**
    * @private
    */
-  async _blockStat () {
+  async _blockStat() {
     let count = BigInt(0)
     let size = BigInt(0)
 
@@ -417,7 +418,7 @@ class Repo {
 /**
  * @param {Datastore} datastore
  */
-async function getSize (datastore) {
+async function getSize(datastore) {
   let sum = BigInt(0)
   for await (const block of datastore.query({})) {
     sum += BigInt(block.value.byteLength)
@@ -433,14 +434,14 @@ async function getSize (datastore) {
  * @param {Partial<Options>} [options] - Configuration
  * @returns {import('./types').IPFSRepo}
  */
-export function createRepo (path, loadCodec, backends, options) {
+export function createRepo(path, loadCodec, backends, options) {
   return new Repo(path, loadCodec, backends, options)
 }
 
 /**
  * @param {import('./types').Config} _config
  */
-function buildConfig (_config) {
+function buildConfig(_config) {
   _config.Datastore = Object.assign({}, defaultDatastore, _get(_config, 'datastore'))
 
   return _config
@@ -449,7 +450,7 @@ function buildConfig (_config) {
 /**
  * @param {import('./types').Config} _config
  */
-function buildDatastoreSpec (_config) {
+function buildDatastoreSpec(_config) {
   /** @type { {type: string, mounts: Array<{mountpoint: string, type: string, prefix: string, child: {type: string, path: 'string', sync: boolean, shardFunc: string}}>}} */
   const spec = {
     ...defaultDatastore.Spec,
