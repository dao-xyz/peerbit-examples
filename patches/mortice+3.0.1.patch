diff --git a/node_modules/mortice/dist/src/index.js b/node_modules/mortice/dist/src/index.js
index 5babae6..120b2ac 100644
--- a/node_modules/mortice/dist/src/index.js
+++ b/node_modules/mortice/dist/src/index.js
@@ -51,10 +51,10 @@ const createMutex = (name, options) => {
                 // started in the interim
                 return await localReadQueue.onIdle()
                     .then(() => {
-                    if (readQueue === localReadQueue) {
-                        readQueue = null;
-                    }
-                });
+                        if (readQueue === localReadQueue) {
+                            readQueue = null;
+                        }
+                    });
             });
             return await readPromise;
         },
@@ -64,6 +64,9 @@ const createMutex = (name, options) => {
             // released
             readQueue = null;
             return await createReleaseable(masterQueue, options);
+        },
+        disconnect: () => {
+
         }
     };
 };
@@ -75,28 +78,30 @@ const defaultOptions = {
 };
 export default function createMortice(options) {
     const opts = Object.assign({}, defaultOptions, options);
+    let disconnect = undefined;
     if (implementation == null) {
         implementation = impl(opts);
         if (implementation.isWorker !== true) {
             // we are master, set up worker requests
-            implementation.addEventListener('requestReadLock', (event) => {
+            implementation.emitter.addEventListener('requestReadLock', (event) => {
                 if (mutexes[event.data.name] == null) {
                     return;
                 }
                 void mutexes[event.data.name].readLock()
                     .then(async (release) => await event.data.handler().finally(() => release()));
             });
-            implementation.addEventListener('requestWriteLock', async (event) => {
+            implementation.emitter.addEventListener('requestWriteLock', async (event) => {
                 if (mutexes[event.data.name] == null) {
                     return;
                 }
                 void mutexes[event.data.name].writeLock()
                     .then(async (release) => await event.data.handler().finally(() => release()));
             });
+            disconnect = implementation.disconnect;
         }
     }
     if (mutexes[opts.name] == null) {
-        mutexes[opts.name] = createMutex(opts.name, opts);
+        mutexes[opts.name] = { ...createMutex(opts.name, opts), disconnect };
     }
     return mutexes[opts.name];
 }
diff --git a/node_modules/mortice/dist/src/node.js b/node_modules/mortice/dist/src/node.js
index b802bac..7573ad4 100644
--- a/node_modules/mortice/dist/src/node.js
+++ b/node_modules/mortice/dist/src/node.js
@@ -64,11 +64,19 @@ const makeWorkerLockRequest = (name, requestType, grantType, releaseType) => {
     };
 };
 export default (options) => {
+    const listeners = [];
     if (cluster.isPrimary || options.singleProcess) {
         const emitter = new EventTarget();
-        cluster.on('message', handleWorkerLockRequest(emitter, 'requestReadLock', WORKER_REQUEST_READ_LOCK, WORKER_RELEASE_READ_LOCK, MASTER_GRANT_READ_LOCK));
-        cluster.on('message', handleWorkerLockRequest(emitter, 'requestWriteLock', WORKER_REQUEST_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK));
-        return emitter;
+        listeners.push(handleWorkerLockRequest(emitter, 'requestReadLock', WORKER_REQUEST_READ_LOCK, WORKER_RELEASE_READ_LOCK, MASTER_GRANT_READ_LOCK));
+        listeners.push(handleWorkerLockRequest(emitter, 'requestWriteLock', WORKER_REQUEST_WRITE_LOCK, WORKER_RELEASE_WRITE_LOCK, MASTER_GRANT_WRITE_LOCK));
+        listeners.forEach(l => {
+            cluster.on('message', l);
+        })
+        return {
+            emitter, disconnect: () => {
+                listeners.forEach((l) => cluster.removeListener('message', l));
+            }
+        };
     }
     return {
         isWorker: true,
